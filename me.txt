Cài docker và docker-compose trên EC2/AWS và Windows
    sudo yum update -y
    sudo yum install -y docker
    sudo service docker start
        service docker status -> Running
        docker -v
    (sudo usermod -a -G docker ec2-user)
    - Cài docker-compose
        sudo curl -L "https://github.com/docker/compose/rel...​ -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
Triển khai tạo Image, Container&Docker Hub
    https://www.youtube.com/watch?v=k5yvD4ykPcI
    Các lệnh với image
        - Tìm image để cài đặt
            docker search centos
        - List các image đang có
            docker image ls
        - Xóa image
            sudo docker rmi [Image ID]
            Chú ý: Các image mà có container đang chạy thì sẽ không xóa được mà phải xóa container liên quan tới nó trước
        - Pull image về
            docker pull centos:7
    Làm việc với container
        - Chạy 1 container từ image
            docker run --privileged -d -p 8080:80 [docker_image] /sbin/init
        - Vào container để chạy lệnh
            docker exec -it [Container ID] /bin/bash 
        - Cài đặt apache
            yum -y install httpd
            systemctl start httpd
            systemctl enable httpd
            EC2 Instances -> Security -> Security groups
            HTTP	    TCP	 80	    0.0.0.0/0
            Custom TCP	TCP	 8080   0.0.0.0/0
            SSH	        TCP	 22	    0.0.0.0/0
            HTTPS	    TCP	 443	0.0.0.0/0
            Access Browser http://18.188.155.79:8080/ to check
            echo "<html><body>Hello World</body></html>" > /var/www/html/index.html
            Access Browser http://18.188.155.79:8080/ to checks
        - Thoát ra khỏi container
            exit
        - Tạo image để triển khai cho máy khác
            docker commit -m "Comment" -a "Tác giả"  [Container ID] [Image Name]
            docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]] 
            docker commit -m "Centos Project1" -a "Vu Quang" 4d3621810593 vudinhquang/project1:v1
            (vudinhquang là tài khoản trên docker hub)
        - Đăng nhập vào docker hub
            docker login
        - Đưa image lên docker hup để mọi người cùng sử dụng
            docker push [Tên image]:[Tag]
            docker push vudinhquang/project1:v1
        - Check các container đang chạy
            sudo docker ps -a
        - Xem trạng thái container
            docker container ls -a
        - Xóa containner
            sudo docker rm [Container ID]
        - Stop container
            docker container stop [Container ID]
        - Restart container
            docker container restart [Container ID]
        - Create new EC2(Khách hàng)
            HTTP	    TCP	80	    0.0.0.0/0	
            Custom TCP	TCP	8080	0.0.0.0/0
            SSH	        TCP	22	    0.0.0.0/0
            sudo yum update -y
            sudo yum install -y docker
            sudo service docker start
                service docker status -> Running
                docker -v
            (sudo usermod -a -G docker ec2-user)
            - Cài docker-compose
                sudo curl -L "https://github.com/docker/compose/rel...​ -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
        - Đăng nhập vào docker hub(EC2 khách hàng )
            docker login
            sudo docker pull vudinhquang/project1:v1
            sudo su -
            docker images
            docker run --privileged -d -p 8080:80 vudinhquang/project1:v1 /sbin/init
            Access Browser http://18.191.99.67:8080/ to check
        EC2 ban đầu
            - Vào Container để sửa 
                docker ps: 4d3621810593
                docker exec -it 4d3621810593 /bin/bash 
                vi /var/www/html/index.html
                    <html><body>Hello World V2</body></html>
                Access Browser http://18.188.155.79:8080 to check
            - Tạo commit Version 2
                docker commit -m "Centos Project1 Version 2" -a "Vu Quang" 4d3621810593 vudinhquang/project1:v2
                docker push vudinhquang/project1:v2
        EC2 khách hàng  
            docker pull vudinhquang/project1:v2
            docker stop 76387f2f692b (stop container hiện tại)
            docker run --privileged -d -p 8080:80 vudinhquang/project1:v2 /sbin/init (chạy container version 2)
        - Pause container
            docker container pause  [Container ID]
        - Truy cập vào các container đang chạy
            docker container attach [Container ID]
        - Lệnh stop toàn bộ container
            docker stop $(docker ps -a -q)
        - Lệnh xóa toàn bộ container
            docker rm $(docker ps -a -q)
        - Lệnh xóa toàn bộ image
            docker rmi -f $(docker images -a -q)
Dockerfile
    Mục đích là build lên các Image bằng cách viết các câu lệnh trong Dockerfile
    Các lệnh trong Dockerfile
        FROM: Là base image để chúng ta tiến hành build một image mới. Command này phải được đặt trên cùng của Dockerfile
        MAINTAINER: Command này là tùy chọn, có thể có hoặc không. Nó chưa thông tin của người tiến hành xây dựng lên images.
        RUN: Sử dụng khi muốn thực thi một command trong quá trình build image
        COPY: Copy một file từ host machine tới docker image. Có thể sử dụng URL cho tệp tin cần copy, khi đó docker sẽ tiến 
            hành tải tệp tin đó đến thư mục đích.
        ARG: Định nghĩa các biến cho quá trình build docker image. Biến này chỉ có scope khi build image, không sử dụng được 
            khi docker container running.
            Cách truyền khi chạy lệnh docker build:
                --build-arg key1=value1
                --build-arg key2=value2
        ENV: Định nghĩa các biến môi trường. ENV có thể được gán bằng 2 cách:
            Gán giá trị mặc định thông qua biến ARG khi build image
            Gán trực tiếp hoặc override khi run container
        WORKDIR: Định nghĩa directory cho CMD
        USER: Đặt user hoặc UID cho container được tạo bởi image
        VOLUME: Cho phép truy cập / liên kết thư mục giữa các container và máy chủ (host machine)
        ENTRYPOINT: Định nghĩa những commands sẽ được chạy đầu tiên khi container chạy.
            Các lệnh thêm vào sau docker run [OPTIONS] [Extra COMMANDs] sẽ được thêm vào chuỗi các commands của entrypoint
        CMD: Định nghĩa các commands mặc định khi không có ENTRYPOINT và Extra COMMANDS
        EXPOSE: Lệnh EXPOSE thông báo cho Docker cho container lắng nghe trên các cổng mạng được chỉ định khi chạy
    Chuẩn bị: 
        Folder code:
            index.html
            test.php
    1. Tạo Dockerfile
        # Get base image
        FROM centos:7

        # Author
        MAINTAINER "Vu Quang"

        #Cai​ dat apache
        RUN yum update -y
        RUN yum install -y sudo
        RUN yum install -y epel-release
        RUN yum install -y https://rpms.remirepo.net/enterprise/remi-release-7.rpm
        RUN yum clean all
        RUN yum -y install wget
        RUN yum -y install httpd
        RUN yum -y install --enablerepo=remi,remi-php71 php php-devel php-mbstring php-pdo php-gd php-xml php-mcrypt php-pgsql
        
        #Thiet​ lap thu muc lam viec 
        WORKDIR /var/www/html

        #copy​ code tu thu muc code vao image
        ADD ./code /var/www/html

        # start httpd
        CMD ["/usr/sbin/httpd", "-D", "FOREGROUND"]

        EXPOSE 80
    2. Build image
        docker build -t httpd_sample .
    3. Tạo và chạy container
        docker run -d -p 80:80 httpd_sample
    Access Browser to check: 
        http://3.138.186.116
        http://3.138.186.116/test.php
    - Lệnh stop toàn bộ container
        docker stop $(docker ps -a -q)
    - Lệnh xóa toàn bộ container
        docker rm $(docker ps -a -q)
    - Lệnh xóa toàn bộ image
        docker rmi -f $(docker images -a -q)
Docker-compose
    Các lệnh Docker-compose:
        version: chỉ ra phiên bản docker-compose đã sử dụng.
        services: thiết lập các services(containers) muốn cài đặt và chạy.
        image: chỉ ra image được sử dụng trong lúc tạo ra container.
        build: dùng để tạo container.
        ports: thiết lập ports chạy tại máy host và trong container.
        restart: tự động khởi chạy khi container bị tắt.
        environment: thiết lập biến môi trường ( thường sử dụng trong lúc config các thông số của db).
        depends_on: chỉ ra sự phụ thuộc. Tức là services nào phải được cài đặt và chạy trước thì service được config tại đó mới được chạy.
        volumes: dùng để mount hai thư mục trên host và container với nhau.
    1. Cài EC2
        #!/bin/bash
        yum update -y
        yum install -y docker
        service docker start
        chkconfig docker on
        curl -L "https://github.com/docker/compose/releases/download/1.11.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
    2. Sample
        Chuẩn bị: 
            Folder code:
                index.html
                phpinfo.php
        1. Tạo file Dockerfile
            FROM centos:7
            RUN yum -y update && \
                yum -y install httpd php
            WORKDIR /var/www/html
            ADD ./code /var/www/html
            EXPOSE 80
        2.Tạo file docker-compose.yml
            version: '3'
            services:                                                                                       
            web:                                                                                          
                build: .
                command: ["/usr/sbin/httpd","-D","FOREGROUND"]           
                ports:                                                                                      
                - "80:80"
        - Build image
            docker-compose build
        - Chạy container
            docker-compose up -d
        Access Browser to check: 
            http://3.138.186.116
            http://3.138.186.116/phpinfo.php
        - Stop
            docker-compose stop
        - Start lại container
            docker-compose start
        - Stop và xóa container
            docker-compose down
        - Lệnh stop toàn bộ container
            docker stop $(docker ps -a -q)
        - Lệnh xóa toàn bộ container
            docker rm $(docker ps -a -q)
        - Lệnh xóa toàn bộ image
            docker rmi -f $(docker images -a -q)
    